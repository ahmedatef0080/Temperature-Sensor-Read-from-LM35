
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001157  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000848  00000000  00000000  000018ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ba  00000000  00000000  00002147  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00002a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048e  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096a  00000000  00000000  000030c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003a2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 86 02 	call	0x50c	; 0x50c <main>
  64:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:

/**************************** ADC_Voltage refrance ****************/
#if  ADC_VOLTAGE_REFRANCE    ==  ADC_VREF_AVCC


clear_bit(ADMUX , 7);
  6c:	3f 98       	cbi	0x07, 7	; 7

set_bit(ADMUX , 6);
  6e:	3e 9a       	sbi	0x07, 6	; 7
/**************************************** ADC DAta reg LEft or Right adj*************/


#if  ADC_ADJUST              ==  ADC_RIGHT_ADJUST // note use right adj when acces by pointer to address of 16 bit 

clear_bit(ADMUX,5);
  70:	3d 98       	cbi	0x07, 5	; 7
#endif

#if ADC_CHANEL             ==   ADC_CHANNEL_1


set_bit(ADMUX,0);
  72:	38 9a       	sbi	0x07, 0	; 7

/************************* ADC Mode selection *******************/

#if ADC_CONVERSION_TRIGGER  ==  ADC_AUTO_TRIGEER

set_bit(ADCSRA,5);
  74:	35 9a       	sbi	0x06, 5	; 6

/***************ADC prescaler select******************/

#if ADC_PRESCALER         ==   ADC_PRESC_128

set_bit(ADCSRA,0);
  76:	30 9a       	sbi	0x06, 0	; 6
set_bit(ADCSRA,1);
  78:	31 9a       	sbi	0x06, 1	; 6
set_bit(ADCSRA,2);
  7a:	32 9a       	sbi	0x06, 2	; 6
#endif


/***************** ADC interrupt enable & disable ******************/
#if ADC_INTERRUPT_STATE    == ADC_INTERRUPT_DISABLE
clear_bit(ADCSRA,3);
  7c:	33 98       	cbi	0x06, 3	; 6




//ADC_ENABLE 
set_bit(ADCSRA,7);
  7e:	37 9a       	sbi	0x06, 7	; 6
  80:	08 95       	ret

00000082 <ADC_Read>:


void ADC_Read(uint16* value)
{
	uint16 Digital_value=0;
	set_bit(ADCSRA , 6);
  82:	36 9a       	sbi	0x06, 6	; 6
	#if ADC_INTERRUPT_STATE == ADC_INTERRUPT_DISABLE
	
	while(!GET_BIT(ADCSRA,4));
  84:	34 9b       	sbis	0x06, 4	; 6
  86:	fe cf       	rjmp	.-4      	; 0x84 <ADC_Read+0x2>
	
	Digital_value=ADC_ADjust ; // (ADCH<<2) | (ADCL>>6);
  88:	64 b1       	in	r22, 0x04	; 4
  8a:	75 b1       	in	r23, 0x05	; 5
	
	*value= (Digital_value*500)/1024 ; //Vin equation 
  8c:	44 ef       	ldi	r20, 0xF4	; 244
  8e:	51 e0       	ldi	r21, 0x01	; 1
  90:	64 9f       	mul	r22, r20
  92:	90 01       	movw	r18, r0
  94:	65 9f       	mul	r22, r21
  96:	30 0d       	add	r19, r0
  98:	74 9f       	mul	r23, r20
  9a:	30 0d       	add	r19, r0
  9c:	11 24       	eor	r1, r1
  9e:	23 2f       	mov	r18, r19
  a0:	26 95       	lsr	r18
  a2:	26 95       	lsr	r18
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_SetPinDirection>:
	  break;
	   case DIO_PORTC:
	   PORTA = Val;
	   break;
	    case DIO_PORTD:
	    PORTA = Val;
  ac:	44 23       	and	r20, r20
  ae:	b9 f1       	breq	.+110    	; 0x11e <DIO_SetPinDirection+0x72>
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	09 f0       	breq	.+2      	; 0xb6 <DIO_SetPinDirection+0xa>
  b4:	6b c0       	rjmp	.+214    	; 0x18c <DIO_SetPinDirection+0xe0>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	89 f0       	breq	.+34     	; 0xdc <DIO_SetPinDirection+0x30>
  ba:	28 f0       	brcs	.+10     	; 0xc6 <DIO_SetPinDirection+0x1a>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	c9 f0       	breq	.+50     	; 0xf2 <DIO_SetPinDirection+0x46>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	11 f1       	breq	.+68     	; 0x108 <DIO_SetPinDirection+0x5c>
  c4:	08 95       	ret
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_SetPinDirection+0x26>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_SetPinDirection+0x22>
  d6:	82 2b       	or	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDirection+0x3c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDirection+0x38>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
  f2:	24 b3       	in	r18, 0x14	; 20
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_SetPinDirection+0x52>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_SetPinDirection+0x4e>
 102:	82 2b       	or	r24, r18
 104:	84 bb       	out	0x14, r24	; 20
 106:	08 95       	ret
 108:	21 b3       	in	r18, 0x11	; 17
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SetPinDirection+0x68>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SetPinDirection+0x64>
 118:	82 2b       	or	r24, r18
 11a:	81 bb       	out	0x11, r24	; 17
 11c:	08 95       	ret
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	91 f0       	breq	.+36     	; 0x146 <DIO_SetPinDirection+0x9a>
 122:	28 f0       	brcs	.+10     	; 0x12e <DIO_SetPinDirection+0x82>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	d9 f0       	breq	.+54     	; 0x15e <DIO_SetPinDirection+0xb2>
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	29 f1       	breq	.+74     	; 0x176 <DIO_SetPinDirection+0xca>
 12c:	08 95       	ret
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDirection+0x8e>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDirection+0x8a>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	8a bb       	out	0x1a, r24	; 26
 144:	08 95       	ret
 146:	27 b3       	in	r18, 0x17	; 23
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPinDirection+0xa6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPinDirection+0xa2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	87 bb       	out	0x17, r24	; 23
 15c:	08 95       	ret
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPinDirection+0xbe>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPinDirection+0xba>
 16e:	80 95       	com	r24
 170:	82 23       	and	r24, r18
 172:	84 bb       	out	0x14, r24	; 20
 174:	08 95       	ret
 176:	21 b3       	in	r18, 0x11	; 17
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SetPinDirection+0xd6>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_SetPinDirection+0xd2>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	81 bb       	out	0x11, r24	; 17
 18c:	08 95       	ret

0000018e <DIO_SetPinValue>:
	}

}
void DIO_SetPinValue(uint8 Port ,uint8 Pin ,  uint8 Val) // val== high or low "1,0";
{
	switch(Val)
 18e:	44 23       	and	r20, r20
 190:	b9 f1       	breq	.+110    	; 0x200 <DIO_SetPinValue+0x72>
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	09 f0       	breq	.+2      	; 0x198 <DIO_SetPinValue+0xa>
 196:	6b c0       	rjmp	.+214    	; 0x26e <DIO_SetPinValue+0xe0>
	{
		case DIO_PIN_HIGH:
		switch(Port)
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	89 f0       	breq	.+34     	; 0x1be <DIO_SetPinValue+0x30>
 19c:	28 f0       	brcs	.+10     	; 0x1a8 <DIO_SetPinValue+0x1a>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	c9 f0       	breq	.+50     	; 0x1d4 <DIO_SetPinValue+0x46>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	11 f1       	breq	.+68     	; 0x1ea <DIO_SetPinValue+0x5c>
 1a6:	08 95       	ret
		{
			case DIO_PORTA:
			set_bit(PORTA,Pin);
 1a8:	2b b3       	in	r18, 0x1b	; 27
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_SetPinValue+0x26>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_SetPinValue+0x22>
 1b8:	82 2b       	or	r24, r18
 1ba:	8b bb       	out	0x1b, r24	; 27
			break;
 1bc:	08 95       	ret
			case DIO_PORTB:
			set_bit(PORTB,Pin);
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SetPinValue+0x3c>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SetPinValue+0x38>
 1ce:	82 2b       	or	r24, r18
 1d0:	88 bb       	out	0x18, r24	; 24
			break;
 1d2:	08 95       	ret
			case DIO_PORTC:
			set_bit(PORTC,Pin);
 1d4:	25 b3       	in	r18, 0x15	; 21
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_SetPinValue+0x52>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_SetPinValue+0x4e>
 1e4:	82 2b       	or	r24, r18
 1e6:	85 bb       	out	0x15, r24	; 21
			break;
 1e8:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD,Pin);
 1ea:	22 b3       	in	r18, 0x12	; 18
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_SetPinValue+0x68>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_SetPinValue+0x64>
 1fa:	82 2b       	or	r24, r18
 1fc:	82 bb       	out	0x12, r24	; 18
			break;
 1fe:	08 95       	ret
			default:
			break;
		}
		break;
		case DIO_PIN_LOW:
		switch(Port)
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	91 f0       	breq	.+36     	; 0x228 <DIO_SetPinValue+0x9a>
 204:	28 f0       	brcs	.+10     	; 0x210 <DIO_SetPinValue+0x82>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	d9 f0       	breq	.+54     	; 0x240 <DIO_SetPinValue+0xb2>
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	29 f1       	breq	.+74     	; 0x258 <DIO_SetPinValue+0xca>
 20e:	08 95       	ret
		{
			case DIO_PORTA:
			clear_bit(PORTA,Pin);
 210:	2b b3       	in	r18, 0x1b	; 27
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_SetPinValue+0x8e>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_SetPinValue+0x8a>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	8b bb       	out	0x1b, r24	; 27
			break;
 226:	08 95       	ret
			case DIO_PORTB:
			clear_bit(PORTB,Pin);
 228:	28 b3       	in	r18, 0x18	; 24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SetPinValue+0xa6>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SetPinValue+0xa2>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	88 bb       	out	0x18, r24	; 24
			break;
 23e:	08 95       	ret
			case DIO_PORTC:
			clear_bit(PORTC,Pin);
 240:	25 b3       	in	r18, 0x15	; 21
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPinValue+0xbe>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPinValue+0xba>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	85 bb       	out	0x15, r24	; 21
			break;
 256:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD,Pin);
 258:	22 b3       	in	r18, 0x12	; 18
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_SetPinValue+0xd6>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_SetPinValue+0xd2>
 268:	80 95       	com	r24
 26a:	82 23       	and	r24, r18
 26c:	82 bb       	out	0x12, r24	; 18
 26e:	08 95       	ret

00000270 <LCD_command>:
	for(int i=0;i<y;i++)
	{
		LCD_command(0x14);
	}
	LCD_str(Data);
}
 270:	cf 93       	push	r28
 272:	c8 2f       	mov	r28, r24
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	63 e0       	ldi	r22, 0x03	; 3
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 292:	8b b3       	in	r24, 0x1b	; 27
 294:	9c 2f       	mov	r25, r28
 296:	90 7f       	andi	r25, 0xF0	; 240
 298:	8f 70       	andi	r24, 0x0F	; 15
 29a:	89 2b       	or	r24, r25
 29c:	8b bb       	out	0x1b, r24	; 27
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 2a8:	8f e9       	ldi	r24, 0x9F	; 159
 2aa:	9f e0       	ldi	r25, 0x0F	; 15
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCD_command+0x3c>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <LCD_command+0x42>
 2b2:	00 00       	nop
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 2be:	2b b3       	in	r18, 0x1b	; 27
 2c0:	30 e1       	ldi	r19, 0x10	; 16
 2c2:	c3 9f       	mul	r28, r19
 2c4:	c0 01       	movw	r24, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	92 2f       	mov	r25, r18
 2ca:	9f 70       	andi	r25, 0x0F	; 15
 2cc:	89 2b       	or	r24, r25
 2ce:	8b bb       	out	0x1b, r24	; 27
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	63 e0       	ldi	r22, 0x03	; 3
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 2da:	8f e9       	ldi	r24, 0x9F	; 159
 2dc:	9f e0       	ldi	r25, 0x0F	; 15
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_command+0x6e>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_command+0x74>
 2e4:	00 00       	nop
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 2f0:	8f e1       	ldi	r24, 0x1F	; 31
 2f2:	9e e4       	ldi	r25, 0x4E	; 78
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_command+0x84>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCD_command+0x8a>
 2fa:	00 00       	nop
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <LCD_init>:
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	63 e0       	ldi	r22, 0x03	; 3
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	65 e0       	ldi	r22, 0x05	; 5
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
 332:	41 e0       	ldi	r20, 0x01	; 1
 334:	66 e0       	ldi	r22, 0x06	; 6
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	67 e0       	ldi	r22, 0x07	; 7
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	81 ee       	ldi	r24, 0xE1	; 225
 34a:	94 e0       	ldi	r25, 0x04	; 4
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <LCD_init+0x4c>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_init+0x56>
 356:	00 00       	nop
 358:	83 e3       	ldi	r24, 0x33	; 51
 35a:	0e 94 38 01 	call	0x270	; 0x270 <LCD_command>
 35e:	82 e3       	ldi	r24, 0x32	; 50
 360:	0e 94 38 01 	call	0x270	; 0x270 <LCD_command>
 364:	88 e2       	ldi	r24, 0x28	; 40
 366:	0e 94 38 01 	call	0x270	; 0x270 <LCD_command>
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	0e 94 38 01 	call	0x270	; 0x270 <LCD_command>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 38 01 	call	0x270	; 0x270 <LCD_command>
 376:	86 e0       	ldi	r24, 0x06	; 6
 378:	0e 94 38 01 	call	0x270	; 0x270 <LCD_command>
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 38 01 	call	0x270	; 0x270 <LCD_command>
 382:	08 95       	ret

00000384 <LCD_data>:
 384:	cf 93       	push	r28
 386:	c8 2f       	mov	r28, r24
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	63 e0       	ldi	r22, 0x03	; 3
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 3a6:	8c 2f       	mov	r24, r28
 3a8:	80 7f       	andi	r24, 0xF0	; 240
 3aa:	8b bb       	out	0x1b, r24	; 27
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 3b6:	8f e9       	ldi	r24, 0x9F	; 159
 3b8:	9f e0       	ldi	r25, 0x0F	; 15
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_data+0x36>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_data+0x3c>
 3c0:	00 00       	nop
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	63 e0       	ldi	r22, 0x03	; 3
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 3cc:	c2 95       	swap	r28
 3ce:	c0 7f       	andi	r28, 0xF0	; 240
 3d0:	cb bb       	out	0x1b, r28	; 27
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	63 e0       	ldi	r22, 0x03	; 3
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 3dc:	8f e9       	ldi	r24, 0x9F	; 159
 3de:	9f e0       	ldi	r25, 0x0F	; 15
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_data+0x5c>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <LCD_data+0x62>
 3e6:	00 00       	nop
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	63 e0       	ldi	r22, 0x03	; 3
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinValue>
 3f2:	8f e1       	ldi	r24, 0x1F	; 31
 3f4:	9e e4       	ldi	r25, 0x4E	; 78
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_data+0x72>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_data+0x78>
 3fc:	00 00       	nop
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <clear_LCD>:
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 38 01 	call	0x270	; 0x270 <LCD_command>
 408:	08 95       	ret

0000040a <LCD_writeint>:
		i++;
	}
	
}
void LCD_writeint(sint32 num)
{
 40a:	4f 92       	push	r4
 40c:	5f 92       	push	r5
 40e:	6f 92       	push	r6
 410:	7f 92       	push	r7
 412:	8f 92       	push	r8
 414:	9f 92       	push	r9
 416:	af 92       	push	r10
 418:	bf 92       	push	r11
 41a:	cf 92       	push	r12
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	6b 01       	movw	r12, r22
 424:	7c 01       	movw	r14, r24
	sint32 y= 1;
	if(num < 0)
 426:	99 23       	and	r25, r25
 428:	5c f4       	brge	.+22     	; 0x440 <LCD_writeint+0x36>
	{
		
	
	LCD_data('-');
 42a:	8d e2       	ldi	r24, 0x2D	; 45
 42c:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_data>
	num *= -1;
 430:	f0 94       	com	r15
 432:	e0 94       	com	r14
 434:	d0 94       	com	r13
 436:	c0 94       	com	r12
 438:	c1 1c       	adc	r12, r1
 43a:	d1 1c       	adc	r13, r1
 43c:	e1 1c       	adc	r14, r1
 43e:	f1 1c       	adc	r15, r1
	}
	while(num > 0)
 440:	1c 14       	cp	r1, r12
 442:	1d 04       	cpc	r1, r13
 444:	1e 04       	cpc	r1, r14
 446:	1f 04       	cpc	r1, r15
 448:	0c f0       	brlt	.+2      	; 0x44c <LCD_writeint+0x42>
 44a:	53 c0       	rjmp	.+166    	; 0x4f2 <LCD_writeint+0xe8>
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e0       	ldi	r25, 0x00	; 0
	{
		y=((y*10) + (num%10));
 454:	0f 2e       	mov	r0, r31
 456:	fa e0       	ldi	r31, 0x0A	; 10
 458:	8f 2e       	mov	r8, r31
 45a:	91 2c       	mov	r9, r1
 45c:	a1 2c       	mov	r10, r1
 45e:	b1 2c       	mov	r11, r1
 460:	f0 2d       	mov	r31, r0
 462:	dc 01       	movw	r26, r24
 464:	cb 01       	movw	r24, r22
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	aa 1f       	adc	r26, r26
 46c:	bb 1f       	adc	r27, r27
 46e:	2c 01       	movw	r4, r24
 470:	3d 01       	movw	r6, r26
 472:	44 0c       	add	r4, r4
 474:	55 1c       	adc	r5, r5
 476:	66 1c       	adc	r6, r6
 478:	77 1c       	adc	r7, r7
 47a:	44 0c       	add	r4, r4
 47c:	55 1c       	adc	r5, r5
 47e:	66 1c       	adc	r6, r6
 480:	77 1c       	adc	r7, r7
 482:	48 0e       	add	r4, r24
 484:	59 1e       	adc	r5, r25
 486:	6a 1e       	adc	r6, r26
 488:	7b 1e       	adc	r7, r27
 48a:	c7 01       	movw	r24, r14
 48c:	b6 01       	movw	r22, r12
 48e:	a5 01       	movw	r20, r10
 490:	94 01       	movw	r18, r8
 492:	0e 94 a4 02 	call	0x548	; 0x548 <__divmodsi4>
 496:	64 0d       	add	r22, r4
 498:	75 1d       	adc	r23, r5
 49a:	86 1d       	adc	r24, r6
 49c:	97 1d       	adc	r25, r7
		num /= 10 ; 
 49e:	c2 2e       	mov	r12, r18
 4a0:	d3 2e       	mov	r13, r19
 4a2:	e4 2e       	mov	r14, r20
 4a4:	f5 2e       	mov	r15, r21
		
	
	LCD_data('-');
	num *= -1;
	}
	while(num > 0)
 4a6:	1c 14       	cp	r1, r12
 4a8:	1d 04       	cpc	r1, r13
 4aa:	1e 04       	cpc	r1, r14
 4ac:	1f 04       	cpc	r1, r15
 4ae:	cc f2       	brlt	.-78     	; 0x462 <LCD_writeint+0x58>
	{
		y=((y*10) + (num%10));
		num /= 10 ; 
	}
	while(y>1)
 4b0:	62 30       	cpi	r22, 0x02	; 2
 4b2:	71 05       	cpc	r23, r1
 4b4:	81 05       	cpc	r24, r1
 4b6:	91 05       	cpc	r25, r1
 4b8:	e4 f0       	brlt	.+56     	; 0x4f2 <LCD_writeint+0xe8>
	{
		LCD_data(((y%10)+48));
 4ba:	0f 2e       	mov	r0, r31
 4bc:	fa e0       	ldi	r31, 0x0A	; 10
 4be:	8f 2e       	mov	r8, r31
 4c0:	91 2c       	mov	r9, r1
 4c2:	a1 2c       	mov	r10, r1
 4c4:	b1 2c       	mov	r11, r1
 4c6:	f0 2d       	mov	r31, r0
 4c8:	a5 01       	movw	r20, r10
 4ca:	94 01       	movw	r18, r8
 4cc:	0e 94 a4 02 	call	0x548	; 0x548 <__divmodsi4>
 4d0:	c2 2e       	mov	r12, r18
 4d2:	d3 2e       	mov	r13, r19
 4d4:	e4 2e       	mov	r14, r20
 4d6:	f5 2e       	mov	r15, r21
 4d8:	80 e3       	ldi	r24, 0x30	; 48
 4da:	86 0f       	add	r24, r22
 4dc:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_data>
		y /=10;
 4e0:	6c 2d       	mov	r22, r12
 4e2:	7d 2d       	mov	r23, r13
 4e4:	8e 2d       	mov	r24, r14
 4e6:	9f 2d       	mov	r25, r15
	while(num > 0)
	{
		y=((y*10) + (num%10));
		num /= 10 ; 
	}
	while(y>1)
 4e8:	62 30       	cpi	r22, 0x02	; 2
 4ea:	71 05       	cpc	r23, r1
 4ec:	81 05       	cpc	r24, r1
 4ee:	91 05       	cpc	r25, r1
 4f0:	5c f7       	brge	.-42     	; 0x4c8 <LCD_writeint+0xbe>
		LCD_data(((y%10)+48));
		y /=10;
		
	}
	
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	df 90       	pop	r13
 4f8:	cf 90       	pop	r12
 4fa:	bf 90       	pop	r11
 4fc:	af 90       	pop	r10
 4fe:	9f 90       	pop	r9
 500:	8f 90       	pop	r8
 502:	7f 90       	pop	r7
 504:	6f 90       	pop	r6
 506:	5f 90       	pop	r5
 508:	4f 90       	pop	r4
 50a:	08 95       	ret

0000050c <main>:

#include "LCD_Driver.h"


int main(void)
{
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	00 d0       	rcall	.+0      	; 0x512 <main+0x6>
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
	uint16 Temp=0;
 516:	1a 82       	std	Y+2, r1	; 0x02
 518:	19 82       	std	Y+1, r1	; 0x01
	
	
	LCD_init();
 51a:	0e 94 80 01 	call	0x300	; 0x300 <LCD_init>
	
	
	TempSensor_init();
 51e:	0e 94 9e 02 	call	0x53c	; 0x53c <TempSensor_init>
    /* Replace with your application code */
    while (1) 
    {
		TempSensor_Read(&Temp); //bassing by refrance "ADRESS"
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	0e 94 a1 02 	call	0x542	; 0x542 <TempSensor_Read>
		
		
		clear_LCD();
 52a:	0e 94 01 02 	call	0x402	; 0x402 <clear_LCD>

		LCD_writeint(Temp);
 52e:	69 81       	ldd	r22, Y+1	; 0x01
 530:	7a 81       	ldd	r23, Y+2	; 0x02
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_writeint>
 53a:	f3 cf       	rjmp	.-26     	; 0x522 <main+0x16>

0000053c <TempSensor_init>:

#include "TEMP_Sensor.h"

void TempSensor_init(void)
{
	ADC_init();
 53c:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
 540:	08 95       	ret

00000542 <TempSensor_Read>:
}

void TempSensor_Read(uint16* Temp)
{
	 ADC_Read(Temp);
 542:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Read>
 546:	08 95       	ret

00000548 <__divmodsi4>:
 548:	05 2e       	mov	r0, r21
 54a:	97 fb       	bst	r25, 7
 54c:	1e f4       	brtc	.+6      	; 0x554 <__divmodsi4+0xc>
 54e:	00 94       	com	r0
 550:	0e 94 bb 02 	call	0x576	; 0x576 <__negsi2>
 554:	57 fd       	sbrc	r21, 7
 556:	07 d0       	rcall	.+14     	; 0x566 <__divmodsi4_neg2>
 558:	0e 94 c3 02 	call	0x586	; 0x586 <__udivmodsi4>
 55c:	07 fc       	sbrc	r0, 7
 55e:	03 d0       	rcall	.+6      	; 0x566 <__divmodsi4_neg2>
 560:	4e f4       	brtc	.+18     	; 0x574 <__divmodsi4_exit>
 562:	0c 94 bb 02 	jmp	0x576	; 0x576 <__negsi2>

00000566 <__divmodsi4_neg2>:
 566:	50 95       	com	r21
 568:	40 95       	com	r20
 56a:	30 95       	com	r19
 56c:	21 95       	neg	r18
 56e:	3f 4f       	sbci	r19, 0xFF	; 255
 570:	4f 4f       	sbci	r20, 0xFF	; 255
 572:	5f 4f       	sbci	r21, 0xFF	; 255

00000574 <__divmodsi4_exit>:
 574:	08 95       	ret

00000576 <__negsi2>:
 576:	90 95       	com	r25
 578:	80 95       	com	r24
 57a:	70 95       	com	r23
 57c:	61 95       	neg	r22
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	08 95       	ret

00000586 <__udivmodsi4>:
 586:	a1 e2       	ldi	r26, 0x21	; 33
 588:	1a 2e       	mov	r1, r26
 58a:	aa 1b       	sub	r26, r26
 58c:	bb 1b       	sub	r27, r27
 58e:	fd 01       	movw	r30, r26
 590:	0d c0       	rjmp	.+26     	; 0x5ac <__udivmodsi4_ep>

00000592 <__udivmodsi4_loop>:
 592:	aa 1f       	adc	r26, r26
 594:	bb 1f       	adc	r27, r27
 596:	ee 1f       	adc	r30, r30
 598:	ff 1f       	adc	r31, r31
 59a:	a2 17       	cp	r26, r18
 59c:	b3 07       	cpc	r27, r19
 59e:	e4 07       	cpc	r30, r20
 5a0:	f5 07       	cpc	r31, r21
 5a2:	20 f0       	brcs	.+8      	; 0x5ac <__udivmodsi4_ep>
 5a4:	a2 1b       	sub	r26, r18
 5a6:	b3 0b       	sbc	r27, r19
 5a8:	e4 0b       	sbc	r30, r20
 5aa:	f5 0b       	sbc	r31, r21

000005ac <__udivmodsi4_ep>:
 5ac:	66 1f       	adc	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	1a 94       	dec	r1
 5b6:	69 f7       	brne	.-38     	; 0x592 <__udivmodsi4_loop>
 5b8:	60 95       	com	r22
 5ba:	70 95       	com	r23
 5bc:	80 95       	com	r24
 5be:	90 95       	com	r25
 5c0:	9b 01       	movw	r18, r22
 5c2:	ac 01       	movw	r20, r24
 5c4:	bd 01       	movw	r22, r26
 5c6:	cf 01       	movw	r24, r30
 5c8:	08 95       	ret

000005ca <_exit>:
 5ca:	f8 94       	cli

000005cc <__stop_program>:
 5cc:	ff cf       	rjmp	.-2      	; 0x5cc <__stop_program>
